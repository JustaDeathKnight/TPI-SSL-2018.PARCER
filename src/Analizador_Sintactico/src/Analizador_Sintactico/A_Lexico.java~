/* The following code was generated by JFlex 1.6.1 */

/*---------------- Area1: Codigo de Usuario -----------------*/

//----> Paquetes e Importaciones
package Analizador_Sintactico;
import java_cup.runtime.*;
import java.util.LinkedList;
import static Analizador_Sintactico.Token.*;

/*------------- Area2: Opciones y Declaraciones -------------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Analizador_Sintactico/Lexer.flex</tt>
 */
public class A_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5,  6,  6,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3, 39,  0,  0,  0,  0,  0, 40, 31, 32, 43, 41, 35, 42, 34,  4, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0, 33, 36, 38, 37,  0, 
     0, 10, 12,  7, 24,  9, 16, 21, 20, 30,  1,  1, 13, 18, 28, 17, 
    23,  1,  8, 15, 11, 22, 26, 19, 27, 25,  1,  1,  1,  1,  1,  1, 
     1, 10, 12,  7, 24,  9, 16, 21, 20, 30,  1,  1, 13, 18, 28, 17, 
    23,  1,  8, 15, 11, 22, 26, 19, 27, 25,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\4\2\1\1"+
    "\7\2\1\1\1\2\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\1\1\16\1\17\1\20\1\21"+
    "\1\4\5\2\1\22\3\0\5\2\1\23\4\2\1\0"+
    "\1\2\1\24\1\25\1\26\2\2\1\27\1\30\1\2"+
    "\2\0\1\31\2\2\1\31\3\2\1\32\2\2\1\33"+
    "\1\0\2\2\1\34\1\2\2\0\2\2\1\35\4\2"+
    "\1\0\2\2\1\36\2\0\2\2\1\37\1\40\1\41"+
    "\1\42\1\0\1\2\1\43\1\44\1\45\1\44\1\45"+
    "\1\0\1\2\2\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\54\0\260\0\334\0\u0108"+
    "\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268"+
    "\0\u0294\0\u02c0\0\u02ec\0\u0318\0\54\0\54\0\54\0\54"+
    "\0\54\0\u0344\0\u0370\0\54\0\u039c\0\54\0\204\0\204"+
    "\0\54\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\130"+
    "\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604"+
    "\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\54"+
    "\0\54\0\54\0\u0764\0\u0790\0\130\0\130\0\u07bc\0\u07e8"+
    "\0\u0814\0\54\0\u0840\0\u086c\0\130\0\u0898\0\u08c4\0\u08f0"+
    "\0\130\0\u091c\0\u0948\0\130\0\u0974\0\u09a0\0\u09cc\0\130"+
    "\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\130\0\u0ad4\0\u0b00"+
    "\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\130\0\u0c08\0\u0c34"+
    "\0\u0c60\0\u0c8c\0\130\0\130\0\130\0\130\0\u0cb8\0\u0ce4"+
    "\0\130\0\54\0\54\0\130\0\130\0\u0d10\0\u0d3c\0\54"+
    "\0\130";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\0\1\7"+
    "\2\3\1\10\1\11\1\12\1\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\3\1\21\6\3\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\55\0\2\3"+
    "\4\0\7\3\1\0\16\3\1\0\1\3\17\0\1\4"+
    "\55\0\1\42\50\0\2\3\4\0\1\3\1\43\5\3"+
    "\1\0\5\3\1\44\10\3\1\0\1\3\16\0\2\3"+
    "\4\0\7\3\1\0\13\3\1\45\1\3\1\46\1\0"+
    "\1\3\16\0\2\3\4\0\3\3\1\47\3\3\1\0"+
    "\16\3\1\0\1\3\16\0\2\3\4\0\7\3\1\0"+
    "\12\3\1\50\3\3\1\0\1\3\26\0\1\51\1\0"+
    "\1\52\12\0\1\53\26\0\2\3\4\0\2\3\1\54"+
    "\1\3\1\55\2\3\1\0\7\3\1\56\6\3\1\0"+
    "\1\3\16\0\2\3\4\0\1\3\1\57\4\3\1\60"+
    "\1\0\16\3\1\0\1\3\16\0\2\3\4\0\1\3"+
    "\1\61\5\3\1\0\16\3\1\0\1\3\16\0\2\3"+
    "\4\0\3\3\1\62\3\3\1\0\16\3\1\0\1\3"+
    "\16\0\2\3\4\0\7\3\1\0\5\3\1\63\10\3"+
    "\1\0\1\3\16\0\2\3\4\0\1\3\1\64\5\3"+
    "\1\0\16\3\1\0\1\3\16\0\2\3\4\0\7\3"+
    "\1\0\2\3\1\65\13\3\1\0\1\3\51\0\1\66"+
    "\20\0\2\3\4\0\7\3\1\0\15\3\1\67\1\0"+
    "\1\3\63\0\1\70\53\0\1\71\53\0\1\72\5\0"+
    "\5\42\2\0\45\42\1\0\2\3\4\0\2\3\1\73"+
    "\4\3\1\0\16\3\1\0\1\3\16\0\2\3\4\0"+
    "\3\3\1\74\3\3\1\0\16\3\1\0\1\3\16\0"+
    "\2\3\4\0\7\3\1\0\6\3\1\75\7\3\1\0"+
    "\1\3\16\0\2\3\4\0\7\3\1\0\11\3\1\76"+
    "\4\3\1\0\1\3\16\0\2\3\4\0\5\3\1\77"+
    "\1\3\1\0\16\3\1\0\1\3\32\0\1\100\46\0"+
    "\1\101\65\0\1\102\32\0\2\3\4\0\6\3\1\103"+
    "\1\0\16\3\1\0\1\3\16\0\2\3\4\0\1\3"+
    "\1\104\5\3\1\0\16\3\1\0\1\3\16\0\2\3"+
    "\4\0\7\3\1\0\3\3\1\105\12\3\1\0\1\3"+
    "\16\0\2\3\4\0\7\3\1\0\2\3\1\106\13\3"+
    "\1\0\1\3\16\0\2\3\4\0\7\3\1\0\2\3"+
    "\1\107\13\3\1\0\1\3\16\0\2\3\4\0\7\3"+
    "\1\0\11\3\1\110\4\3\1\0\1\3\16\0\2\3"+
    "\4\0\7\3\1\0\14\3\1\111\1\3\1\0\1\3"+
    "\16\0\2\3\4\0\2\3\1\112\4\3\1\0\16\3"+
    "\1\0\1\3\16\0\2\3\4\0\7\3\1\0\2\3"+
    "\1\113\13\3\1\0\1\3\16\0\2\3\4\0\4\3"+
    "\1\114\2\3\1\0\16\3\1\0\1\3\30\0\1\115"+
    "\41\0\2\3\4\0\4\3\1\116\2\3\1\0\16\3"+
    "\1\0\1\3\16\0\2\3\4\0\3\3\1\117\3\3"+
    "\1\0\16\3\1\0\1\3\16\0\2\3\4\0\1\3"+
    "\1\120\5\3\1\0\16\3\1\0\1\3\16\0\2\3"+
    "\4\0\6\3\1\121\1\0\16\3\1\0\1\3\26\0"+
    "\1\122\77\0\2\123\16\0\2\3\4\0\2\3\1\124"+
    "\4\3\1\0\16\3\1\0\1\3\16\0\2\3\4\0"+
    "\7\3\1\0\16\3\1\123\1\125\16\0\2\3\4\0"+
    "\7\3\1\0\3\3\1\126\12\3\1\0\1\3\16\0"+
    "\2\3\4\0\3\3\1\127\3\3\1\0\16\3\1\0"+
    "\1\3\16\0\2\3\4\0\2\3\1\130\4\3\1\0"+
    "\16\3\1\0\1\3\16\0\2\3\4\0\1\3\1\131"+
    "\5\3\1\0\16\3\1\0\1\3\16\0\2\3\4\0"+
    "\7\3\1\0\7\3\1\132\6\3\1\0\1\3\26\0"+
    "\1\133\43\0\2\3\4\0\2\3\1\134\4\3\1\0"+
    "\16\3\1\0\1\3\16\0\2\3\4\0\4\3\1\135"+
    "\2\3\1\0\16\3\1\0\1\3\16\0\2\3\4\0"+
    "\2\3\1\136\4\3\1\0\16\3\1\0\1\3\24\0"+
    "\1\137\100\0\1\140\20\0\2\3\4\0\1\141\6\3"+
    "\1\0\16\3\1\0\1\3\16\0\2\3\4\0\7\3"+
    "\1\0\15\3\1\142\1\0\1\3\16\0\2\3\4\0"+
    "\4\3\1\143\2\3\1\0\16\3\1\0\1\3\16\0"+
    "\2\3\4\0\1\3\1\144\5\3\1\0\16\3\1\0"+
    "\1\3\16\0\2\3\4\0\2\3\1\145\4\3\1\0"+
    "\16\3\1\0\1\3\16\0\2\3\4\0\7\3\1\0"+
    "\10\3\1\146\5\3\1\0\1\3\42\0\1\147\27\0"+
    "\2\3\4\0\7\3\1\0\6\3\1\150\7\3\1\0"+
    "\1\3\16\0\2\3\4\0\2\3\1\151\4\3\1\0"+
    "\16\3\1\0\1\3\30\0\1\152\65\0\1\153\27\0"+
    "\2\3\4\0\4\3\1\154\2\3\1\0\16\3\1\0"+
    "\1\3\16\0\2\3\4\0\7\3\1\0\6\3\1\155"+
    "\7\3\1\0\1\3\26\0\1\156\43\0\2\3\4\0"+
    "\2\3\1\157\4\3\1\0\16\3\1\0\1\3\25\0"+
    "\1\160\44\0\2\3\4\0\1\3\1\161\5\3\1\0"+
    "\16\3\1\0\1\3\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3432];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\17\1\5\11\2\1\1\11"+
    "\1\1\1\11\2\1\1\11\7\1\3\0\12\1\1\0"+
    "\1\1\3\11\5\1\2\0\1\11\12\1\1\0\4\1"+
    "\2\0\7\1\1\0\3\1\2\0\6\1\1\0\2\1"+
    "\2\11\2\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
//----> Codigo de Usuario
    public static LinkedList<Tabla_Error> Tabla_ERROR_LEXICO = new LinkedList<Tabla_Error>(); 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public A_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Token.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error, el simbolo o sentencia "+yytext() +"no fue recnocido \n");
        TError datos = new Tabla_Error(yytext(), yyline, yycolumn, "Error Lexico, ", "Simbolo no pertenece al lenguaje");
        Tabla_ERROR_LEXICO.add(datos);
            }
          case 39: break;
          case 2: 
            { lexeme=yytext(); return new Symbol(Token.TKN_ID, yycolumn, yyline, yytext());
            }
          case 40: break;
          case 3: 
            { lexeme=yytext(); new Symbol(Token.return TKN_INT, yycolumn, yyline, yytext());
            }
          case 41: break;
          case 4: 
            { /*Ignore*/
            }
          case 42: break;
          case 5: 
            { return new Symbol(Token.TKN_DIVID, yycolumn, yyline, yytext());
            }
          case 43: break;
          case 6: 
            { return new Symbol(Token.TKN_APAR, yycolumn, yyline, yytext());
            }
          case 44: break;
          case 7: 
            { return new Symbol(Token.TKN_CPAR, yycolumn, yyline, yytext());
            }
          case 45: break;
          case 8: 
            { return new Symbol(Token.TKN_PTOCOMA, yycolumn, yyline, yytext());
            }
          case 46: break;
          case 9: 
            { return new Symbol(Token.TKN_PTO, yycolumn, yyline, yytext());
            }
          case 47: break;
          case 10: 
            { return new Symbol(Token.TKN_COMA, yycolumn, yyline, yytext());
            }
          case 48: break;
          case 11: 
            { return new Symbol(Token.TKN_MEN, yycolumn, yyline, yytext());
            }
          case 49: break;
          case 12: 
            { return new Symbol(Token.TKN_MAY, yycolumn, yyline, yytext());
            }
          case 50: break;
          case 13: 
            { return new Symbol(Token.TKN_IGUAL, yycolumn, yyline, yytext());
            }
          case 51: break;
          case 14: 
            { return new Symbol(Token.TKN_APOST, yycolumn, yyline, yytext());
            }
          case 52: break;
          case 15: 
            { return new Symbol(Token.TKN_PLUS, yycolumn, yyline, yytext());
            }
          case 53: break;
          case 16: 
            { return new Symbol(Token.TKN_MINUS, yycolumn, yyline, yytext());
            }
          case 54: break;
          case 17: 
            { return new Symbol(Token.TKN_MULT, yycolumn, yyline, yytext());
            }
          case 55: break;
          case 18: 
            { return new Symbol(Token.TKN_BY, yycolumn, yyline, yytext());
            }
          case 56: break;
          case 19: 
            { return new Symbol(Token.TKN_OR, yycolumn, yyline, yytext());
            }
          case 57: break;
          case 20: 
            { return new Symbol(Token.TKN_MENIGU, yycolumn, yyline, yytext());
            }
          case 58: break;
          case 21: 
            { return new Symbol(Token.TKN_MAYIGU, yycolumn, yyline, yytext());
            }
          case 59: break;
          case 22: 
            { return new Symbol(Token.TKN_DIST, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 23: 
            { return new Symbol(Token.TKN_AVG, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 24: 
            { return new Symbol(Token.TKN_AND, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 25: 
            { return new Symbol(Token.TKN_SUM, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 26: 
            { return new Symbol(Token.TKN_MAX, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 27: 
            { return new Symbol(Token.TKN_NOT, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 28: 
            { return TKN_CHAR;
            }
          case 66: break;
          case 29: 
            { return new Symbol(Token.TKN_FROM, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 30: 
            { return new Symbol(Token.TKN_TABLE, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 31: 
            { return TKN_FLOAT;
            }
          case 69: break;
          case 32: 
            { return new Symbol(Token.TKN_ORDER, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 33: 
            { return new Symbol(Token.TKN_WHERE, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 34: 
            { return new Symbol(Token.TKN_GROUP, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 35: 
            { return new Symbol(Token.TKN_CREATE, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 36: 
            { return new Symbol(Token.TKN_SELECT, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 37: 
            { return TKN_STRING;
            }
          case 75: break;
          case 38: 
            { return TKN_INTEG;
            }
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
