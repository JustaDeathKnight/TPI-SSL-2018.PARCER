
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador_Sintactico;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Token.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\206\000\002\002\004\000\002\047\003\000\002\050" +
    "\005\000\002\050\004\000\002\050\005\000\002\050\006" +
    "\000\002\050\005\000\002\050\006\000\002\051\005\000" +
    "\002\052\005\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\005" +
    "\000\002\054\005\000\002\054\005\000\002\054\005\000" +
    "\002\056\004\000\002\056\005\000\002\056\005\000\002" +
    "\056\006\000\002\055\004\000\002\055\005\000\002\055" +
    "\005\000\002\055\006\000\002\057\005\000\002\057\006" +
    "\000\002\060\005\000\002\060\004\000\002\060\006\000" +
    "\002\060\005\000\002\106\005\000\002\111\004\000\002" +
    "\111\006\000\002\110\007\000\002\107\003\000\002\107" +
    "\005\000\002\061\004\000\002\063\004\000\002\063\004" +
    "\000\002\066\003\000\002\066\003\000\002\066\005\000" +
    "\002\066\005\000\002\104\006\000\002\064\004\000\002" +
    "\065\003\000\002\065\005\000\002\105\003\000\002\105" +
    "\003\000\002\105\003\000\002\105\003\000\002\105\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\004\000\002\062\004\000\002\062\004\000\002" +
    "\062\005\000\002\067\004\000\002\070\004\000\002\071" +
    "\004\000\002\072\003\000\002\072\004\000\002\073\004" +
    "\000\002\074\004\000\002\076\003\000\002\076\005\000" +
    "\002\075\005\000\002\075\005\000\002\075\005\000\002" +
    "\075\005\000\002\075\007\000\002\075\005\000\002\101" +
    "\005\000\002\101\005\000\002\101\005\000\002\101\005" +
    "\000\002\102\005\000\002\112\003\000\002\112\004\000" +
    "\002\103\003\000\002\077\003\000\002\077\003\000\002" +
    "\100\003\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\100\003\000\002\100\003\000\002\030\003" +
    "\000\002\031\003\000\002\020\003\000\002\032\003\000" +
    "\002\011\003\000\002\014\003\000\002\013\003\000\002" +
    "\015\003\000\002\012\003\000\002\041\003\000\002\044" +
    "\003\000\002\045\003\000\002\046\003\000\002\034\003" +
    "\000\002\035\003\000\002\036\003\000\002\037\003\000" +
    "\002\040\003\000\002\042\003\000\002\043\003\000\002" +
    "\007\003\000\002\006\003\000\002\002\003\000\002\003" +
    "\003\000\002\033\003\000\002\010\003\000\002\023\003" +
    "\000\002\024\003\000\002\025\003\000\002\026\003\000" +
    "\002\016\003\000\002\027\003\000\002\021\003\000\002" +
    "\022\003\000\002\017\003\000\002\053\003\000\002\004" +
    "\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\006\004\012\006\004\001\002\000\020\015" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\050\uff9f" +
    "\001\002\000\004\002\000\001\002\000\004\002\275\001" +
    "\002\000\012\010\172\011\175\012\167\034\034\001\002" +
    "\000\020\015\141\021\142\022\133\023\132\024\151\025" +
    "\137\050\021\001\002\000\004\032\032\001\002\000\004" +
    "\005\uffa1\001\002\000\004\005\026\001\002\000\004\007" +
    "\017\001\002\000\004\050\021\001\002\000\012\010\uffd7" +
    "\011\uffd7\012\uffd7\034\uffd7\001\002\000\004\050\uff9e\001" +
    "\002\000\014\010\uffce\011\uffce\012\uffce\034\uffce\036\024" +
    "\001\002\000\060\007\uff7d\010\uff7d\011\uff7d\012\uff7d\026" +
    "\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d" +
    "\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043" +
    "\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\001\002" +
    "\000\012\010\uffcf\011\uffcf\012\uffcf\034\uffcf\001\002\000" +
    "\004\050\021\001\002\000\010\015\uff88\016\uff88\050\uff88" +
    "\001\002\000\012\010\uffcd\011\uffcd\012\uffcd\034\uffcd\001" +
    "\002\000\004\050\uffa0\001\002\000\004\050\021\001\002" +
    "\000\004\032\ufff9\001\002\000\004\050\021\001\002\000" +
    "\006\050\uff8b\051\uff8b\001\002\000\004\034\034\001\002" +
    "\000\010\002\uff7e\004\uff7e\006\uff7e\001\002\000\010\002" +
    "\uffff\004\012\006\004\001\002\000\004\002\ufffc\001\002" +
    "\000\006\033\ufff5\036\024\001\002\000\006\033\ufff6\036" +
    "\024\001\002\000\012\026\074\027\070\030\071\031\075" +
    "\001\002\000\004\033\062\001\002\000\006\033\ufff7\036" +
    "\024\001\002\000\006\033\ufff4\036\024\001\002\000\006" +
    "\016\047\050\021\001\002\000\004\033\uffed\001\002\000" +
    "\004\017\uff97\001\002\000\004\033\uffec\001\002\000\004" +
    "\017\053\001\002\000\004\032\032\001\002\000\010\032" +
    "\uff96\033\uff96\036\uff96\001\002\000\004\050\021\001\002" +
    "\000\004\033\062\001\002\000\006\033\uffd9\036\024\001" +
    "\002\000\004\050\021\001\002\000\004\033\uffd8\001\002" +
    "\000\004\033\uffda\001\002\000\024\007\uff8a\011\uff8a\012" +
    "\uff8a\014\uff8a\033\uff8a\034\uff8a\036\uff8a\045\uff8a\046\uff8a" +
    "\001\002\000\006\016\047\050\021\001\002\000\004\033" +
    "\ufff3\001\002\000\004\033\ufff2\001\002\000\004\034\ufff8" +
    "\001\002\000\012\014\106\032\032\033\uffe0\036\uffe0\001" +
    "\002\000\012\014\uff8e\032\uff8e\033\uff8e\036\uff8e\001\002" +
    "\000\012\014\uff8d\032\uff8d\033\uff8d\036\uff8d\001\002\000" +
    "\012\014\106\032\032\033\uffeb\036\uffeb\001\002\000\012" +
    "\014\106\032\032\033\uffe7\036\uffe7\001\002\000\004\032" +
    "\uff8f\001\002\000\012\014\uff8c\032\uff8c\033\uff8c\036\uff8c" +
    "\001\002\000\004\032\032\001\002\000\010\014\106\033" +
    "\uffe3\036\uffe3\001\002\000\004\051\102\001\002\000\004" +
    "\033\062\001\002\000\032\011\uff7c\012\uff7c\033\uff7c\034" +
    "\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c" +
    "\045\uff7c\046\uff7c\001\002\000\010\014\uffdd\033\uffdd\036" +
    "\uffdd\001\002\000\006\033\uffe2\036\uffe2\001\002\000\004" +
    "\020\110\001\002\000\010\020\uff99\050\uff99\051\uff99\001" +
    "\002\000\010\016\047\033\uffdc\036\uffdc\001\002\000\010" +
    "\016\uff95\033\uff95\036\uff95\001\002\000\004\017\053\001" +
    "\002\000\006\033\uffdb\036\uffdb\001\002\000\010\014\106" +
    "\033\uffe6\036\uffe6\001\002\000\006\033\uffe5\036\uffe5\001" +
    "\002\000\006\033\uffe4\036\uffe4\001\002\000\006\033\uffe9" +
    "\036\uffe9\001\002\000\010\014\106\033\uffea\036\uffea\001" +
    "\002\000\006\033\uffe8\036\uffe8\001\002\000\006\033\uffde" +
    "\036\uffde\001\002\000\010\014\106\033\uffe1\036\uffe1\001" +
    "\002\000\006\033\uffdf\036\uffdf\001\002\000\006\016\047" +
    "\050\021\001\002\000\004\033\ufff1\001\002\000\004\033" +
    "\ufff0\001\002\000\006\016\047\050\021\001\002\000\004" +
    "\033\uffef\001\002\000\004\033\uffee\001\002\000\004\032" +
    "\uff92\001\002\000\004\032\uff93\001\002\000\004\032\uffc8" +
    "\001\002\000\004\007\uffd5\001\002\000\004\032\uffcc\001" +
    "\002\000\004\032\uff90\001\002\000\004\007\uffd6\001\002" +
    "\000\004\007\uff98\001\002\000\004\032\uff94\001\002\000" +
    "\004\007\uffd3\001\002\000\010\007\uffd4\035\157\036\024" +
    "\001\002\000\004\032\032\001\002\000\004\032\uffc9\001" +
    "\002\000\004\032\uffcb\001\002\000\004\032\uffca\001\002" +
    "\000\004\032\uff91\001\002\000\004\050\021\001\002\000" +
    "\004\033\062\001\002\000\004\007\uffd0\001\002\000\006" +
    "\015\141\050\021\001\002\000\006\015\141\050\021\001" +
    "\002\000\006\015\uff89\050\uff89\001\002\000\004\007\uffd2" +
    "\001\002\000\004\007\uffd1\001\002\000\010\002\ufffe\004" +
    "\012\006\004\001\002\000\004\034\034\001\002\000\004" +
    "\034\uffc5\001\002\000\006\011\175\034\uffc6\001\002\000" +
    "\010\011\175\012\167\034\uffc7\001\002\000\004\013\uff9b" +
    "\001\002\000\006\050\021\051\102\001\002\000\004\050" +
    "\021\001\002\000\010\014\uff9d\050\uff9d\051\uff9d\001\002" +
    "\000\004\013\202\001\002\000\004\050\021\001\002\000" +
    "\004\013\uff9c\001\002\000\004\013\202\001\002\000\010" +
    "\014\106\050\uffbd\051\uffbd\001\002\000\006\050\uffbc\051" +
    "\uffbc\001\002\000\004\050\uffbb\001\002\000\004\050\uff9a" +
    "\001\002\000\004\034\uffbe\001\002\000\004\050\uffba\001" +
    "\002\000\006\011\uffbf\034\uffbf\001\002\000\014\011\uffc0" +
    "\012\uffc0\034\uffc0\045\250\046\246\001\002\000\034\011" +
    "\uffb9\012\uffb9\033\uffb9\034\uffb9\035\157\037\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\001" +
    "\002\000\032\011\uffaa\012\uffaa\033\uffaa\034\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\001\002\000\016\037\217\040\216\041\223\042\215" +
    "\043\225\044\224\001\002\000\016\037\217\040\216\041" +
    "\223\042\215\043\225\044\224\001\002\000\010\047\uffa2" +
    "\050\uffa2\051\uffa2\001\002\000\010\047\uffa7\050\uffa7\051" +
    "\uffa7\001\002\000\010\047\uff84\050\uff84\051\uff84\001\002" +
    "\000\010\047\uff86\050\uff86\051\uff86\001\002\000\010\047" +
    "\uff87\050\uff87\051\uff87\001\002\000\004\050\021\001\002" +
    "\000\010\047\uffa4\050\uffa4\051\uffa4\001\002\000\010\047" +
    "\uffa3\050\uffa3\051\uffa3\001\002\000\010\047\uff85\050\uff85" +
    "\051\uff85\001\002\000\010\047\uff82\050\uff82\051\uff82\001" +
    "\002\000\010\047\uff83\050\uff83\051\uff83\001\002\000\010" +
    "\047\uffa5\050\uffa5\051\uffa5\001\002\000\010\047\uffa6\050" +
    "\uffa6\051\uffa6\001\002\000\016\011\uffb4\012\uffb4\033\uffb4" +
    "\034\uffb4\045\uffb4\046\uffb4\001\002\000\010\047\233\050" +
    "\021\051\102\001\002\000\016\011\uffb6\012\uffb6\033\uffb6" +
    "\034\uffb6\045\uffb6\046\uffb6\001\002\000\020\011\uff7f\012" +
    "\uff7f\033\uff7f\034\uff7f\045\uff7f\046\uff7f\050\uff7f\001\002" +
    "\000\016\011\uffb7\012\uffb7\033\uffb7\034\uffb7\045\uffb7\046" +
    "\uffb7\001\002\000\016\011\uffb5\012\uffb5\033\uffb5\034\uffb5" +
    "\045\uffb5\046\uffb5\001\002\000\004\050\021\001\002\000" +
    "\004\047\233\001\002\000\006\047\uffac\050\021\001\002" +
    "\000\004\047\uffab\001\002\000\016\011\uffad\012\uffad\033" +
    "\uffad\034\uffad\045\uffad\046\uffad\001\002\000\004\050\021" +
    "\001\002\000\032\011\uffb8\012\uffb8\033\uffb8\034\uffb8\037" +
    "\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\046\uffb8\001\002\000\010\032\uffa8\050\uffa8\051\uffa8\001" +
    "\002\000\010\032\uff80\050\uff80\051\uff80\001\002\000\010" +
    "\032\uffa9\050\uffa9\051\uffa9\001\002\000\010\032\uff81\050" +
    "\uff81\051\uff81\001\002\000\010\032\032\050\021\051\102" +
    "\001\002\000\016\011\uffb2\012\uffb2\033\uffb2\034\uffb2\045" +
    "\uffb2\046\uffb2\001\002\000\006\050\021\051\102\001\002" +
    "\000\016\037\217\040\216\041\223\042\215\043\225\044" +
    "\224\001\002\000\016\037\217\040\216\041\223\042\215" +
    "\043\225\044\224\001\002\000\004\050\021\001\002\000" +
    "\016\011\uffae\012\uffae\033\uffae\034\uffae\045\uffae\046\uffae" +
    "\001\002\000\010\047\233\050\021\051\102\001\002\000" +
    "\016\011\uffb0\012\uffb0\033\uffb0\034\uffb0\045\uffb0\046\uffb0" +
    "\001\002\000\016\011\uffb1\012\uffb1\033\uffb1\034\uffb1\045" +
    "\uffb1\046\uffb1\001\002\000\016\011\uffaf\012\uffaf\033\uffaf" +
    "\034\uffaf\045\uffaf\046\uffaf\001\002\000\010\033\062\045" +
    "\250\046\246\001\002\000\016\011\uffb3\012\uffb3\033\uffb3" +
    "\034\uffb3\045\uffb3\046\uffb3\001\002\000\004\034\uffc3\001" +
    "\002\000\006\011\175\034\uffc4\001\002\000\004\034\uffc1" +
    "\001\002\000\004\034\uffc2\001\002\000\010\002\ufffd\004" +
    "\012\006\004\001\002\000\004\002\ufffa\001\002\000\004" +
    "\002\ufffb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\020\020\007\030\012\047\005\050\004\051" +
    "\010\061\006\063\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\011\176\013\175\014" +
    "\172\053\161\062\162\067\165\070\164\071\163\072\167" +
    "\073\170\074\173\001\001\000\026\004\143\034\135\035" +
    "\146\036\147\037\145\040\133\041\142\066\137\104\134" +
    "\105\144\001\001\000\006\002\030\052\032\001\001\000" +
    "\002\001\001\000\004\031\026\001\001\000\006\032\014" +
    "\064\015\001\001\000\006\004\017\065\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\017\065" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\027\001\001\000\002\001\001\000" +
    "\016\004\040\054\041\055\037\056\042\057\036\060\043" +
    "\001\001\000\002\001\001\000\004\053\034\001\001\000" +
    "\002\001\001\000\016\020\007\030\012\050\035\051\010" +
    "\061\006\063\013\001\001\000\002\001\001\000\004\010" +
    "\126\001\001\000\004\010\123\001\001\000\012\006\071" +
    "\007\072\042\075\043\066\001\001\000\004\003\065\001" +
    "\001\000\004\010\062\001\001\000\004\010\044\001\001" +
    "\000\022\004\040\044\050\054\045\055\037\056\042\057" +
    "\036\060\043\110\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\051\001\001\000" +
    "\004\002\053\001\001\000\002\001\001\000\006\004\055" +
    "\107\054\001\001\000\004\003\060\001\001\000\004\010" +
    "\056\001\001\000\006\004\055\107\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\040\044\050\054\063\055\037\056\042\057\036\060\043" +
    "\110\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\077\012\104\106\121\111\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\077\012\104\106\116\111\115\001\001\000\012\002\077" +
    "\012\104\106\112\111\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\077\106\076\001\001\000\006" +
    "\012\104\111\103\001\001\000\004\005\100\001\001\000" +
    "\004\003\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\106\001\001\000\002\001" +
    "\001\000\004\044\110\001\001\000\002\001\001\000\004" +
    "\045\111\001\001\000\002\001\001\000\006\012\104\111" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\104\111\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\104\111\122\001\001" +
    "\000\002\001\001\000\022\004\040\044\050\054\124\055" +
    "\037\056\042\057\036\060\043\110\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\040\044\050\054" +
    "\127\055\037\056\042\057\036\060\043\110\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\154" +
    "\033\155\001\001\000\004\002\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\152\001\001\000\004\003\153\001\001\000" +
    "\002\001\001\000\010\004\143\041\142\066\160\001\001" +
    "\000\010\004\143\041\142\066\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\020\007" +
    "\030\012\050\273\051\010\061\006\063\013\001\001\000" +
    "\004\053\271\001\001\000\002\001\001\000\010\014\172" +
    "\071\270\074\173\001\001\000\016\013\175\014\172\070" +
    "\266\071\265\073\170\074\173\001\001\000\002\001\001" +
    "\000\014\004\206\005\207\075\205\076\210\103\211\001" +
    "\001\000\006\004\017\065\204\001\001\000\002\001\001" +
    "\000\004\015\203\001\001\000\006\004\017\065\202\001" +
    "\001\000\002\001\001\000\004\015\200\001\001\000\004" +
    "\012\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\246\022\244\077\250\001\001\000" +
    "\004\033\242\001\001\000\002\001\001\000\020\016\221" +
    "\023\213\024\226\025\225\026\220\027\212\100\230\001" +
    "\001\000\020\016\221\023\213\024\226\025\225\026\220" +
    "\027\212\100\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\206\076\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\004\206\005\207\017\235\076\233\102\231" +
    "\103\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\237\112\236" +
    "\001\001\000\004\017\241\001\001\000\006\004\237\112" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\206\076\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\002\252\004\206\005\207\076\253\101\251\103" +
    "\254\001\001\000\002\001\001\000\014\004\206\005\207" +
    "\075\263\076\210\103\211\001\001\000\020\016\221\023" +
    "\213\024\226\025\225\026\220\027\212\100\257\001\001" +
    "\000\020\016\221\023\213\024\226\025\225\026\220\027" +
    "\212\100\255\001\001\000\006\004\206\076\256\001\001" +
    "\000\002\001\001\000\016\004\206\005\207\017\235\076" +
    "\261\102\260\103\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\264\021\246\022" +
    "\244\077\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\172\071\267\074\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\020\007\030\012\050\272" +
    "\051\010\061\006\063\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static LinkedList<Tabla_Error> Tabla_ERROR_SINTAX = new LinkedList<Tabla_Error>();

    //Metodo llamado automaticamente al encontrar algun error Sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("Error Sintáctico, La Sentencia de Entrada no está completa");
        System.out.println("\tLexema: "+lexema);
        System.out.println("\tFila: "+fila);
        System.out.println("\tColumna: "+columna);

        Tabla_Error datos = new Tabla_Error(lexema, fila, columna, "Error Sintactico", "Caracter no esperado");

        /*-- Tabla_ERROR_SINTAX-> tabla de errores sintácticos --*/
        Tabla_ERROR_SINTAX.add(datos);
    }

    //Metodo llamado en el momento en el que ya no es posible la recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        Interface.Area_de_Resultado.setText("Resultado del Análisis: \n \n");
        Interface.Area_de_Resultado.append("Error Sintáctico, No es posible continuar con el Análisis! \n");
        Interface.Area_de_Resultado.append(" Hint:\n");
        Interface.Area_de_Resultado.append("\tLexema: "+ lexema +" \n");
        Interface.Area_de_Resultado.append("\tFila: "+ fila +" \n");
        Interface.Area_de_Resultado.append("\tColumna: "+ columna +" \n");

        Tabla_Error datos = new Tabla_Error(lexema, fila, columna, "Error Sintactico", "Caracter no esperado");
        Tabla_ERROR_SINTAX.add(datos);
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= X 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // X ::= Cre Y P_c 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // X ::= S P_c 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // X ::= S Z P_c 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // X ::= Cre Y P_c X 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // X ::= S P_c X 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // X ::= S Z P_c X 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Cre ::= N_TKN_CREATE N_TKN_TABLE N_TKN_ID 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cre",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Y ::= N_TKN_APAR E_T N_TKN_CPAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Y",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E_T ::= E_NUM 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_T",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E_T ::= E_STR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_T",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E_T ::= E_VCH 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_T",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E_T ::= E_CHR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_T",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E_T ::= E_NUM N_TKN_COMA E_T 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_T",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E_T ::= E_NUM N_TKN_COMA P_KEY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_T",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E_T ::= E_STR N_TKN_COMA E_T 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_T",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E_T ::= E_STR N_TKN_COMA P_KEY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_T",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E_T ::= E_VCH N_TKN_COMA E_T 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_T",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E_T ::= E_VCH N_TKN_COMA P_KEY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_T",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E_T ::= E_CHR N_TKN_COMA E_T 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_T",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E_T ::= E_CHR N_TKN_COMA P_KEY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_T",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E_NUM ::= N_TKN_ID N_TKN_INTEG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_NUM",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E_NUM ::= N_TKN_ID N_TKN_INTEG C_INT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_NUM",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E_NUM ::= N_TKN_ID N_TKN_INTEG N_NULL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_NUM",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E_NUM ::= N_TKN_ID N_TKN_INTEG C_INT N_NULL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_NUM",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E_STR ::= N_TKN_ID N_TKN_STRING 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_STR",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E_STR ::= N_TKN_ID N_TKN_STRING C_INT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_STR",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E_STR ::= N_TKN_ID N_TKN_STRING N_NULL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_STR",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E_STR ::= N_TKN_ID N_TKN_STRING C_INT N_NULL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_STR",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E_VCH ::= N_TKN_ID N_TKN_VARCHAR C_INT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_VCH",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E_VCH ::= N_TKN_ID N_TKN_VARCHAR C_INT N_NULL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_VCH",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E_CHR ::= N_TKN_ID N_TKN_CHAR C_INT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_CHR",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E_CHR ::= N_TKN_ID N_TKN_CHAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_CHR",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E_CHR ::= N_TKN_ID N_TKN_CHAR C_INT N_NULL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_CHR",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E_CHR ::= N_TKN_ID N_TKN_CHAR N_NULL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_CHR",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // C_INT ::= N_TKN_APAR N_TKN_INT N_TKN_CPAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_INT",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // N_NULL ::= N_TKN_NOT N_TKN_NULL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_NULL",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // N_NULL ::= N_TKN_NOT N_TKN_NULL N_TKN_PRIMARY N_TKN_KEY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_NULL",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // P_KEY ::= N_TKN_PRIMARY N_TKN_KEY N_TKN_APAR C_ID N_TKN_CPAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P_KEY",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // C_ID ::= N_TKN_ID 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_ID",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // C_ID ::= N_TKN_ID N_TKN_COMA C_ID 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C_ID",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // S ::= S_E F 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // S_E ::= N_TKN_SELECT R_Tab 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S_E",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // S_E ::= N_TKN_SELECT F_ESTRUCTURA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S_E",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // R_Tab ::= N_TKN_ID 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_Tab",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // R_Tab ::= N_TKN_TODO 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_Tab",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // R_Tab ::= N_TKN_ID N_TKN_PTO R_Tab 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_Tab",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // R_Tab ::= N_TKN_ID N_TKN_COMA R_Tab 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_Tab",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // F_ESTRUCTURA ::= F_SQL N_TKN_APAR N_TKN_ID N_TKN_CPAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_ESTRUCTURA",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // F ::= N_TKN_FROM R_Col 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // R_Col ::= N_TKN_ID 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_Col",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // R_Col ::= N_TKN_ID N_TKN_COMA R_Col 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_Col",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // F_SQL ::= N_TKN_COUNT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_SQL",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // F_SQL ::= N_TKN_AVG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_SQL",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // F_SQL ::= N_TKN_SUM 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_SQL",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // F_SQL ::= N_TKN_MIN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_SQL",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // F_SQL ::= N_TKN_MAX 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_SQL",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Z ::= A 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Z",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Z ::= B 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Z",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Z ::= C 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Z",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Z ::= A B 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Z",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Z ::= A C 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Z",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Z ::= B C 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Z",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Z ::= A B C 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Z",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // A ::= W Cond 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // B ::= O_B R_Col 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("B",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // C ::= G_B R_Col 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // W ::= N_TKN_WHERE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("W",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // W ::= N_TKN_WHERE N_TKN_NOT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("W",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // O_B ::= N_TKN_ORDER N_TKN_BY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("O_B",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // G_B ::= N_TKN_GROUP N_TKN_BY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("G_B",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // R_Camp ::= N_TKN_ID 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_Camp",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // R_Camp ::= N_TKN_ID N_TKN_PTO R_Camp 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_Camp",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Cond ::= R_Camp N_OP R_Camp 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cond",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Cond ::= R_Camp N_OP T_ASIG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cond",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Cond ::= R_Camp N_OP T_INT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cond",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Cond ::= T_INT N_OP R_Camp 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cond",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Cond ::= Cond N_AO N_TKN_APAR Cond N_TKN_CPAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cond",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Cond ::= Cond N_AO Head 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cond",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Head ::= R_Camp N_OP R_Camp 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Head",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Head ::= R_Camp N_OP T_ASIG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Head",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Head ::= R_Camp N_OP T_INT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Head",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Head ::= T_INT N_OP R_Camp 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Head",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // T_ASIG ::= N_TKN_APOST R_ID N_TKN_APOST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_ASIG",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // R_ID ::= N_TKN_ID 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_ID",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // R_ID ::= N_TKN_ID R_ID 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_ID",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // T_INT ::= N_TKN_INT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_INT",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // N_AO ::= N_TKN_AND 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_AO",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // N_AO ::= N_TKN_OR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_AO",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // N_OP ::= N_TKN_MEN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_OP",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // N_OP ::= N_TKN_MAY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_OP",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // N_OP ::= N_TKN_MAYIGU 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_OP",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // N_OP ::= N_TKN_MENIGU 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_OP",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // N_OP ::= N_TKN_IGUAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_OP",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // N_OP ::= N_TKN_DIST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_OP",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // N_TKN_CREATE ::= TKN_CREATE 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("CREATE "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_CREATE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // N_TKN_TABLE ::= TKN_TABLE 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("TABLE "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_TABLE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // N_TKN_SELECT ::= TKN_SELECT 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("SELECT "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_SELECT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // N_TKN_FROM ::= TKN_FROM 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("\nFROM "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_FROM",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // N_TKN_WHERE ::= TKN_WHERE 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("\nWHERE "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_WHERE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // N_TKN_GROUP ::= TKN_GROUP 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("\nGROUP "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_GROUP",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // N_TKN_ORDER ::= TKN_ORDER 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("\nORDER "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_ORDER",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // N_TKN_BY ::= TKN_BY 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("BY "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_BY",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // N_TKN_NOT ::= TKN_NOT 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("NOT "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_NOT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // N_TKN_TODO ::= TKN_TODO 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("TODO* "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_TODO",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // N_TKN_PRIMARY ::= TKN_PRIMARY 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("PRIMARY "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_PRIMARY",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // N_TKN_KEY ::= TKN_KEY 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("KEY "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_KEY",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // N_TKN_NULL ::= TKN_NULL 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("NULL "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_NULL",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // N_TKN_COUNT ::= TKN_COUNT 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("COUNT "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_COUNT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // N_TKN_AVG ::= TKN_AVG 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("AVG "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_AVG",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // N_TKN_SUM ::= TKN_SUM 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("SUM "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_SUM",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // N_TKN_MIN ::= TKN_MIN 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("MIN "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_MIN",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // N_TKN_MAX ::= TKN_MAX 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("MAX "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_MAX",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // N_TKN_VARCHAR ::= TKN_VARCHAR 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("VARCHAR "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_VARCHAR",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // N_TKN_CHAR ::= TKN_CHAR 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("CHAR "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_CHAR",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // N_TKN_STRING ::= TKN_STRING 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("STRING "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_STRING",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // N_TKN_INTEG ::= TKN_INTEG 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("INTEGER "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_INTEG",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // N_TKN_APAR ::= TKN_APAR 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("A_PAR \n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_APAR",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // N_TKN_CPAR ::= TKN_CPAR 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("\n" +"C_PAR "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_CPAR",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // N_TKN_PTO ::= TKN_PTO 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("PTO "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_PTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // N_TKN_COMA ::= TKN_COMA 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("COMA "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_COMA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // N_TKN_MEN ::= TKN_MEN 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("MEN "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_MEN",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // N_TKN_MAY ::= TKN_MAY 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("MAY "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_MAY",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // N_TKN_MAYIGU ::= TKN_MAYIGU 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("MAY_IGUAL "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_MAYIGU",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // N_TKN_MENIGU ::= TKN_MENIGU 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("MEN_IGUAL "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_MENIGU",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // N_TKN_IGUAL ::= TKN_IGUAL 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("IGUAL "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_IGUAL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // N_TKN_DIST ::= TKN_DIST 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("DISTINTO "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_DIST",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // N_TKN_AND ::= TKN_AND 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("AND "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_AND",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // N_TKN_OR ::= TKN_OR 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("OR "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_OR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // N_TKN_APOST ::= TKN_APOST 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("APOST "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_APOST",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // P_c ::= TKN_PTOCOMA 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("PTO_COMA" + "\n \n ** La Sentencia de entrada ha sido aceptada ** \n \n" ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P_c",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // N_TKN_ID ::= TKN_ID 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("'ID' "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_ID",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // N_TKN_INT ::= TKN_INT 
            {
              String RESULT =null;
		 Interface.Area_de_Resultado.append("'INT' "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_TKN_INT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
